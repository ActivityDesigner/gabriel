#!/usr/bin/env python
#
# Cloudlet Infrastructure for Mobile Computing
#
#   Author: Kiryong Ha <krha@cmu.edu>
#           Zhuo Chen <zhuoc@cs.cmu.edu>
#
#   Copyright (C) 2011-2013 Carnegie Mellon University
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

import multiprocessing
import Queue
import collections
from optparse import OptionParser
import os
import pprint
import struct
import sys
import time
import threading
import pdb

if os.path.isdir("../gabriel"):
    sys.path.insert(0, "..")
import gabriel
import gabriel.proxy
import json
import cv2
import numpy as np
import base64
import requests
import mpc.tpod_state_check as tpod_state_check
import mpc.aed_state_check as aed_state_check

LOG = gabriel.logging.getLogger(__name__)
ANDROID_CLIENT = True

# AED project
MAX_PIC_NUM = 100
PIC_QUEUE = collections.deque(maxlen=MAX_PIC_NUM)

# TPOD Parameters
TPOD_QUEUE = collections.deque(maxlen=2)

AEDStateCheck = None
TPODStateCheck = None

PREVIOUS_STATE = -2

LOG_ENABLE = False


def process_command_line(argv):
    VERSION = 'gabriel proxy : %s' % gabriel.Const.VERSION
    DESCRIPTION = "Gabriel cognitive assistance"

    parser = OptionParser(usage='%prog [option]', version=VERSION,
                          description=DESCRIPTION)

    parser.add_option(
        '-s', '--address', action='store', dest='address',
        help="(IP address:port number) of directory server")
    settings, args = parser.parse_args(argv)
    if len(args) >= 1:
        parser.error("invalid arguement")

    if hasattr(settings, 'address') and settings.address is not None:
        if settings.address.find(":") == -1:
            parser.error("Need address and port. Ex) 10.0.0.1:8081")
    return settings, args



class DummyVideoApp(gabriel.proxy.CognitiveProcessThread):
    def add_to_byte_array(self, byte_array, extra_bytes):
        return struct.pack("!{}s{}s".format(len(byte_array), len(extra_bytes)), byte_array, extra_bytes)

    def handle(self, header, data):
        global PREVIOUS_STATE
        # PERFORM Cognitive Assistance Processing
        # LOG.info("processing: ")
        # LOG.info("%s\n" % header)
        np_data = np.fromstring(data, dtype=np.uint8)
        bgr_img = cv2.imdecode(np_data, cv2.IMREAD_COLOR)
        mirror_img = cv2.flip(bgr_img, 1)
        _, jpeg_img = cv2.imencode('.jpg', mirror_img)

        if ANDROID_CLIENT:
            # old version return
            if gabriel.Const.LEGACY_JSON_ONLY_RESULT:
                jpeg_str = base64.b64encode(jpeg_img)
                msg = {
                    gabriel.Protocol_result.JSON_KEY_STATUS: 'success',
                    gabriel.Protocol_result.JSON_KEY_IMAGE: jpeg_str,
                    gabriel.Protocol_result.JSON_KEY_IMAGES_ANIMATION: [jpeg_str],
                    gabriel.Protocol_result.JSON_KEY_SPEECH: "mirror"
                }
                return json.dumps(msg)
            # new gabriel version return
            else:
                # image data
                header[gabriel.Protocol_result.JSON_KEY_STATUS] = 'success'
                # numpy tostring is equal to tobytes
                rtn_data = jpeg_img.tostring()
                # header has (offset, size) for each data type
                header[gabriel.Protocol_result.JSON_KEY_IMAGE] = (0, len(rtn_data))

                # save picture to buffer
                PIC_QUEUE.append(bgr_img.copy())
                TPOD_QUEUE.append(bgr_img.copy())

                print '[MAIN_THREAD]: picture queue size   ' + str(len(PIC_QUEUE))

                # return state
                # can add more field to aed_state dict when returned
                aed_state = str(
                    {'aed_state': AEDStateCheck.CURRENT_AED_STATE, 'tpod_state': TPODStateCheck.get_result()})
                offset = len(rtn_data)
                rtn_data = self.add_to_byte_array(rtn_data, aed_state)
                header[gabriel.Protocol_result.JSON_KEY_AEDSTATE] = (offset, len(aed_state))


                if AEDStateCheck.CURRENT_AED_STATE != PREVIOUS_STATE:
                    # add corresponding speech data
                    PREVIOUS_STATE = AEDStateCheck.CURRENT_AED_STATE
                    offset = len(rtn_data)
                    speech = AEDStateCheck.get_speech_message()
                    rtn_data = self.add_to_byte_array(rtn_data, speech)
                    header[gabriel.Protocol_result.JSON_KEY_SPEECH] = (offset, len(speech))
                return rtn_data

        else:
            # python client can only handle image data
            return jpeg_img.tostring()


frame_counter = 0
frame_sampling = 1


class AedStateCheck(threading.Thread):
    '''
    The thread that does AED state check using opencv processing.
    It takes input data from @PIC_QUEUE and puts output data into CURRENT_AED_STATE.
    TPOD neural network result is in TPOD_RESULT
    '''

    def __init__(self):
        self.stop = threading.Event()
        threading.Thread.__init__(self, target=self.run)

    def run(self):
        # define your global vars here..

        while not self.stop.wait(0.001):
            try:
                crt_pic = PIC_QUEUE.popleft()
                AEDStateCheck.logic(crt_pic)
                # print "[AED THREAD] current frame:" + str(frame_counter)

            except IndexError as e:
                # stop for 10 ms if the queue is empty
                # print "TEST EXCEPTION " + str(frame_counter) + str(e)
                self.stop.wait(0.1)
                continue

    def terminate(self):
        print "TEST TERMINATE " + str(frame_counter)
        self.stop.set()


class TpodCheck(threading.Thread):
    '''
    The thread that does TPOD check using opencv processing.
    It takes input data from @TPOD_QUEUE and puts output data into TPOD_RESULT.
    TPOD neural network result is in TPOD_RESULT
    '''

    def __init__(self):
        self.stop = threading.Event()

        threading.Thread.__init__(self, target=self.run)

    def run(self):
        # define your global vars here..
        while (not self.stop.wait(0.01)):
            try:
                crt_pic = TPOD_QUEUE.popleft()
                TPODStateCheck.logic(crt_pic)
            except IndexError as e:
                # stop for 10 ms if the queue is empty
                # print "[TPOD_CHECK_THREAD]: NO PICTURES in TPOD QUEUE " + str(len(PIC_QUEUE))
                self.stop.wait(0.1)
                continue

    def terminate(self):
        self.stop.set()


if __name__ == "__main__":
    result_queue = multiprocessing.Queue()
    print result_queue._reader

    settings, args = process_command_line(sys.argv[1:])
    ip_addr, port = gabriel.network.get_registry_server_address(settings.address)
    service_list = gabriel.network.get_service_list(ip_addr, port)
    # LOG.info("Gabriel Server :")
    # LOG.info(pprint.pformat(service_list))

    video_ip = service_list.get(gabriel.ServiceMeta.VIDEO_TCP_STREAMING_IP)
    video_port = service_list.get(gabriel.ServiceMeta.VIDEO_TCP_STREAMING_PORT)
    ucomm_ip = service_list.get(gabriel.ServiceMeta.UCOMM_SERVER_IP)
    ucomm_port = service_list.get(gabriel.ServiceMeta.UCOMM_SERVER_PORT)

    # image receiving and processing threads
    image_queue = Queue.Queue(gabriel.Const.APP_LEVEL_TOKEN_SIZE)
    print "TOKEN SIZE OF OFFLOADING ENGINE: %d" % gabriel.Const.APP_LEVEL_TOKEN_SIZE  # TODO
    video_receive_client = gabriel.proxy.SensorReceiveClient((video_ip, video_port), image_queue)
    video_receive_client.start()
    video_receive_client.isDaemon = True

    dummy_video_app = DummyVideoApp(image_queue, result_queue, engine_id='dummy')  # dummy app for image processing
    dummy_video_app.start()
    dummy_video_app.isDaemon = True

    # result publish
    result_pub = gabriel.proxy.ResultPublishClient((ucomm_ip, ucomm_port), result_queue)
    result_pub.start()
    result_pub.isDaemon = True

    # classes for AED and TPOD
    AEDStateCheck = aed_state_check.AEDState()
    TPODStateCheck = tpod_state_check.TpodState()

    # tpod thread
    tpod_check = TpodCheck()
    tpod_check.start()
    tpod_check.isDaemon = True
    # LOG.info("TPOD_CHECK_THREAD: START")
    print "TPOD_CHECK_THREAD: START"

    # aed state thread
    aed_state_check = AedStateCheck()
    aed_state_check.start()
    aed_state_check.isDaemon = True
    # LOG.info("AED_STATE_THREAD: START")
    print "AED_STATE_THREAD: START"

    try:
        while True:
            time.sleep(1)
    except Exception as e:
        pass
    except KeyboardInterrupt as e:
        sys.stdout.write("user exits\n")
    finally:
        if video_receive_client is not None:
            video_receive_client.terminate()
        if dummy_video_app is not None:
            dummy_video_app.terminate()
        if tpod_check is not None:
            tpod_check.terminate()
        if aed_state_check is not None:
            aed_state_check.terminate()
        # if acc_client is not None:
        #    acc_client.terminate()
        # if acc_app is not None:
        #    acc_app.terminate()
        result_pub.terminate()
